h1. A Set implementation for MooTools

h2. How it works

JavaScript has no sane notion of equality when comparing Arrays or Objects. This is particularly frustrating in light of the ubiquitous use of JSON. For example:

<pre>
[1, 2, 3] != [1, 2, 3]
{first:"Bob", last:"Smith"} != {first:"Bob", last:"Smith"}
</pre>

One easy workaround is to JSON.encode the arrays before comparing them. This works reasonably well as long as you don't have Objects in your array.

This Set implementation can deal with Objects. It converts Objects into an array of array, one for each key value pair. It does so recursively. In order to allow for comparison, these arrays are sorted by the original key.

<pre>
{first:"Bob", last:"Smith"} -> [['first', 'Bob'], ['last', 'Smith']]
</pre>

Then we can JSON encode this array to do equality checks. You can see this for yourself by using $hash directly.

<pre>
$hash({first:"Bob", last:"Smith"}) == $hash({last:"Smith", first:"Bob"})
</pre>

h3. Features

Set supports intersection, union, and difference. These return new Set instances. If you want array you can use aintersection, aunion, adifference.

<pre>
var set1 = new Set([1, 2, [3, 4], 9]);
var set2 = new Set([1, [3, 4], 9, 5]);
set1.aintersection(set2) -> [1, [3, 4], 9]
</pre>

For large collections, sets are much faster than using Array.contains as long as you are willing to pay the cost of initializing the Set. For collections which are searched or compared frequently Sets are particularly useful.

$hash is also handy. You can now sanely check if two Objects are equal.